// Code generated by protoc-gen-gin. DO NOT EDIT.
// versions:
// - protoc-gen-gin v0.0.1
// - protoc  v3.12.4
// source: example/v1/greeter.proto

package v1

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/go-woo/protoc-gen-gin/runtime"
)

func RegisterGreeterRouter(r *gin.Engine) {
	r.GET("/helloworld/:name/hi/:nice", _Greeter_SayHello0_HTTP_Handler)

	r.POST("/register", _Greeter_CreateUser0_HTTP_Handler)

	r.POST("/login", _Greeter_Login0_HTTP_Handler)

	r.PATCH("/restricted/usr/:phone", JWTAuthMiddleware, _Greeter_UpdateUser0_HTTP_Handler)
	r.DELETE("/usr/:phone", JWTAuthMiddleware, _Greeter_DeleteUser0_HTTP_Handler)
	r.GET("/usr/:phone", _Greeter_ListUsers0_HTTP_Handler)

}

func _Greeter_SayHello0_HTTP_Handler(c *gin.Context) {
	if c.Request.ParseForm() != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"reason": "form data format error",
			"msg":    "",
		})
	}
	uv := c.Request.Form

	var req *HelloRequest = new(HelloRequest)
	if len(uv) > 0 {
		if err := runtime.BindValues(req, uv); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"reason": "request data format error",
				"msg":    "",
			})
		}
	}
	reply, err := GreeterSayHelloBusinessHandler0(req, c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"reason": "BusinessHandler error",
			"msg":    "",
		})
	}
	c.JSON(http.StatusOK, &reply)
}

func _Greeter_CreateUser0_HTTP_Handler(c *gin.Context) {
	if c.Request.ParseForm() != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"reason": "form data format error",
			"msg":    "",
		})
	}
	uv := c.Request.Form

	var req *CreateUserRequest = new(CreateUserRequest)
	if len(uv) > 0 {
		if err := runtime.BindValues(req, uv); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"reason": "request data format error",
				"msg":    "",
			})
		}
	}
	reply, err := GreeterCreateUserBusinessHandler0(req, c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"reason": "BusinessHandler error",
			"msg":    "",
		})
	}
	c.JSON(http.StatusOK, &reply)
}

func _Greeter_Login0_HTTP_Handler(c *gin.Context) {
	if c.Request.ParseForm() != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"reason": "form data format error",
			"msg":    "",
		})
	}
	uv := c.Request.Form

	var req *LoginRequest = new(LoginRequest)
	if len(uv) > 0 {
		if err := runtime.BindValues(req, uv); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"reason": "request data format error",
				"msg":    "",
			})
		}
	}
	reply, err := GreeterLoginBusinessHandler0(req, c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"reason": "BusinessHandler error",
			"msg":    "",
		})
	}
	c.JSON(http.StatusOK, &reply)
}

func _Greeter_UpdateUser0_HTTP_Handler(c *gin.Context) {
	if c.Request.ParseForm() != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"reason": "form data format error",
			"msg":    "",
		})
	}
	uv := c.Request.Form

	var req *UpdateUserRequest = new(UpdateUserRequest)
	if len(uv) > 0 {
		if err := runtime.BindValues(req, uv); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"reason": "request data format error",
				"msg":    "",
			})
		}
	}
	reply, err := GreeterUpdateUserBusinessHandler0(req, c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"reason": "BusinessHandler error",
			"msg":    "",
		})
	}
	c.JSON(http.StatusOK, &reply)
}

func _Greeter_DeleteUser0_HTTP_Handler(c *gin.Context) {
	if c.Request.ParseForm() != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"reason": "form data format error",
			"msg":    "",
		})
	}
	uv := c.Request.Form

	var req *UserRequest = new(UserRequest)
	if len(uv) > 0 {
		if err := runtime.BindValues(req, uv); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"reason": "request data format error",
				"msg":    "",
			})
		}
	}
	reply, err := GreeterDeleteUserBusinessHandler0(req, c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"reason": "BusinessHandler error",
			"msg":    "",
		})
	}
	c.JSON(http.StatusOK, &reply)
}

func _Greeter_ListUsers0_HTTP_Handler(c *gin.Context) {
	if c.Request.ParseForm() != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"reason": "form data format error",
			"msg":    "",
		})
	}
	uv := c.Request.Form

	var req *UserRequest = new(UserRequest)
	if len(uv) > 0 {
		if err := runtime.BindValues(req, uv); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{
				"reason": "request data format error",
				"msg":    "",
			})
		}
	}
	reply, err := GreeterListUsersBusinessHandler0(req, c)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"reason": "BusinessHandler error",
			"msg":    "",
		})
	}
	c.JSON(http.StatusOK, &reply)
}
